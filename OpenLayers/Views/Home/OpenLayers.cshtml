@{
    Layout = null;
}
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/ol")
@Styles.Render("~/Content/css")
<!DOCTYPE html>
<html>
<head>
    <title>ArcGIS REST Feature Service</title>
</head>
<body>
    <div id="map" class="map"></div>
    <div id="info">&nbsp;</div>
    <script>

        var serviceUrl = 'https://services2.arcgis.com/nOGTdfb4kF4dZljH/arcgis/rest/services/' +
            'Places/FeatureServer/';
        var layer = '0';

        var esrijsonFormat = new ol.format.EsriJSON();

        var vectorSource = new ol.source.Vector({
            loader: function (extent, resolution, projection) {
                var url = serviceUrl + layer + '/query/?f=pjson&' +
                    'returnGeometry=true&spatialRel=esriSpatialRelIntersects&geometry=' +
                    encodeURIComponent('{"xmin":' + extent[0] + ',"ymin":' +
                        extent[1] + ',"xmax":' + extent[2] + ',"ymax":' + extent[3] +
                        ',"spatialReference":{"wkid":102100}}') +
                    '&geometryType=esriGeometryEnvelope&inSR=102100&outFields=*' +
                    '&outSR=102100';
                $.ajax({
                    url: url, dataType: 'jsonp', success: function (response) {
                        if (response.error) {
                            alert(response.error.message + '\n' +
                                response.error.details.join('\n'));
                        } else {
                            // dataProjection will be read from document
                            var features = esrijsonFormat.readFeatures(response, {
                                featureProjection: projection
                            });
                            if (features.length > 0) {
                                vectorSource.addFeatures(features);
                            }
                        }
                    }
                });
            },
            strategy: function (extent, resolution) {
                if (this.resolution && this.resolution != resolution) {
                    this.loadedExtentsRtree_.clear();
                }
                return [extent];
            }
            //strategy: ol.loadingstrategy.all
            //strategy: ol.loadingstrategy.bbox
            //strategy: ol.loadingstrategy.tile(ol.tilegrid.createXYZ({
            //    tileSize: 512
            //}))
        });

        var vector = new ol.layer.Vector({
            source: vectorSource
        });

        var raster = new ol.layer.Tile({
            source: new ol.source.XYZ({
                attributions: 'Tiles © <a href="https://services.arcgisonline.com/ArcGIS/' +
                    'rest/services/World_Topo_Map/MapServer">ArcGIS</a>',
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/' +
                    'World_Topo_Map/MapServer/tile/{z}/{y}/{x}'
            })
        });
        
        var map = new ol.Map({
            layers: [raster, vector],
            target: document.getElementById('map'),
            view: new ol.View({
                //Approximate MoCo extent
                center: ol.proj.fromLonLat([-121.5, 36.25]),
                zoom: 9
            })
        });

        var displayFeatureInfo = function (pixel) {
            var features = [];
            map.forEachFeatureAtPixel(pixel, function (feature) {
                features.push(feature);
            });
            if (features.length > 0) {
                var info = [];
                var i, ii;
                for (i = 0, ii = features.length; i < ii; ++i) {
                    //ADDRESS_FULL attribute
                    info.push(features[i].get('ADDRESS_FU'));
                }
                document.getElementById('info').innerHTML = info.join(', ') || '(unknown)';
                map.getTarget().style.cursor = 'pointer';
            } else {
                document.getElementById('info').innerHTML = '&nbsp;';
                map.getTarget().style.cursor = '';
            }
        };

        map.on('pointermove', function (evt) {
            if (evt.dragging) {
                return;
            }
            var pixel = map.getEventPixel(evt.originalEvent);
            displayFeatureInfo(pixel);
        });

        map.on('click', function (evt) {
            displayFeatureInfo(evt.pixel);
        });
    </script>
</body>
</html>

